package mthesis.concurrent_graph.communication.messages;

option java_package = "mthesis.concurrent_graph.communication";
option java_outer_classname = "Messages";

message MessageEnvelope {
	optional VertexMessage VertexMessage = 1;
	optional ControlMessage ControlMessage = 2;
}

message VertexMessage {
		optional int32 SuperstepNo = 1;
		optional int32 FromNode = 2;  // TODO ToNode?
		optional int32 FromVertex = 3;
		optional int32 ToVertex = 4;
		optional int32 Content = 5;  // TODO Type
		//bytes Content = 5;
	}
	
	enum ControlMessageType {
		// Handshake at channel startup
		Channel_Handshake = 1;
	
		// Message from workers to workers to signal superstep barrier
		Worker_Superstep_Barrier = 2;
		// Message from workers to signal master that a superstep is finished, including barrier and message sort
		Worker_Superstep_Finished = 3;
		// Message from workers to signal master that the worker is completely finished
		Worker_Finished = 4;
	
		// Message to signal workers to start with next superstep
		Master_Next_Superstep = 5;
		// Message to signal workers to finish, output and terminate
		Master_Finish = 6;
	}
	  
	message ControlMessage {
		optional ControlMessageType Type = 1;
		optional int32 SuperstepNo = 2;
		optional int32 FromNode = 3;
		optional int32 Content1 = 4;//TODO Type
		optional int32 Content2 = 5;//TODO Type
		//bytes Content = 4;
	}
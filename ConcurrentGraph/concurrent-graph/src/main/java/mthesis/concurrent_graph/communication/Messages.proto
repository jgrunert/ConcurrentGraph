package mthesis.concurrent_graph.communication.messages;

option java_package = "mthesis.concurrent_graph.communication";
option java_outer_classname = "Messages";

message MessageEnvelope {
	optional ControlMessage ControlMessage = 1;
}
	
	enum ControlMessageType {
		// Handshake at channel startup
		Channel_Handshake = 1;
	
		// Message from worker to master when finished initializing and ready now
		Worker_Initialized = 2;
		// Message from workers to workers to signal query superstep barrier
		Worker_Query_Superstep_Barrier = 3;
		// Message from workers to signal master that a query superstep is finished, including barrier and message sort
		Worker_Query_Superstep_Finished = 4;
		// Message from workers to signal master that a query is finished
		Worker_Query_Finished = 5;
	
		// Message from master to workers to initialize, assigning partition
		Master_Worker_Initialize = 6;
		// Message from master to workers to start a query
		Master_Query_Start = 7;
		// Message to signal workers to start with next query superstep
		Master_Query_Next_Superstep = 8;
		// Message to signal workers to finish a query, output and terminate
		Master_Query_Finished = 9;
	}
	  
	message ControlMessage {
		optional ControlMessageType Type = 1;
		optional int32 SuperstepNo = 2;
		optional int32 SrcMachine = 3;
		optional WorkerStatsMessage WorkerStats = 4;
		optional AssignPartitionsMessage AssignPartitions = 5;
		optional bytes QueryGlobalValues = 6;
		
		message AssignPartitionsMessage {	
			repeated string PartitionFiles = 1;
		}
		
		message WorkerStatsMessage {
			optional int32 SentControlMessages = 2;
			optional int32 SentVertexMessagesLocal = 3;
			optional int32 SentVertexMessagesUnicast = 4;
			optional int32 SentVertexMessagesBroadcast = 5;
			optional int32 SentVertexMessagesBuckets = 11;
			optional int32 ReceivedCorrectVertexMessages = 6;
			optional int32 ReceivedWrongVertexMessages = 7;
			optional int32 NewVertexMachinesDiscovered = 8;
			optional int32 TotalVertexMachinesDiscovered = 9;
		}
	}
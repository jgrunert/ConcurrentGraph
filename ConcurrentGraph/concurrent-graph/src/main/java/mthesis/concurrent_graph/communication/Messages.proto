syntax = "proto2";

package mthesis.concurrent_graph.communication.messages;

option java_package = "mthesis.concurrent_graph.communication";
option java_outer_classname = "Messages";

message MessageEnvelope {
	optional ControlMessage ControlMessage = 1;
}
	
	enum ControlMessageType {
		// Handshake at channel startup
		Channel_Handshake = 1;
	
		// Message from worker to master when finished initializing and ready now
		Worker_Initialized = 2;
		// Message from workers to workers to signal query superstep barrier
		Worker_Query_Superstep_Barrier = 3;
		// Message from workers to signal master that a query superstep is finished, including barrier and message sort
		Worker_Query_Superstep_Finished = 4;
		// Message from workers to signal master that a query is finished
		Worker_Query_Finished = 5;
		// Message from workers to other workers to signal barrier started
		Worker_Barrier_Started = 12;
		// Message from workers to other workers to signal barrier finished
		Worker_Barrier_Finished  = 13;
	
		// Message from master to workers to initialize, assigning partition
		Master_Worker_Initialize = 6;
		// Message from master to workers to start a query
		Master_Query_Start = 7;
		// Message to signal workers to start with next query superstep
		Master_Query_Next_Superstep = 8;
		// Message to signal workers to finish a query, output and terminate
		Master_Query_Finished = 9;
		// Message to signal the system to shutdown
		Master_Shutdown = 10;
		// Message to signal workers to make a system wide barrier to perform tasks
		Master_Start_Barrier = 11;
	}
	  
	message ControlMessage {
		optional ControlMessageType Type = 1;
		optional int32 SuperstepNo = 2;
		optional int32 SrcMachine = 3;
		//optional WorkerStatsMessage WorkerStats = 4;
		optional AssignPartitionsMessage AssignPartitions = 5;
		optional bytes QueryValues = 6;
		optional WorkerInitializedMessage WorkerInitialized = 7;
		//optional QueriesIntersectionsMessage QueriesIntersections = 8;
		optional SendQueryVerticesMessage SendQueryVertices = 9;
		optional ReceiveQueryVerticesMessage ReceiveQueryVertices = 10;
		optional StartBarrierMessage StartBarrier = 11;
		optional WorkerStatsMessage WorkerStats = 12;
		optional StartSuperstepMessage StartSuperstep = 13;
		
		message AssignPartitionsMessage {	
			optional int64 MasterStartTime = 1;
			repeated string PartitionFiles = 2;
		}
		
		message WorkerInitializedMessage {
			optional int32 VertexCount = 1;
		}
		
		message StartSuperstepMessage {
			optional bool SkipBarrierAndCompute = 1;
			repeated int32 WorkersWaitFor = 2;
		}
		
		//message QueriesIntersectionsMessage {
		//	map<int32, SingelQueryIntersectionsMessage> QueriesIntersections = 1;
		//}
		
		//message SingelQueryIntersectionsMessage {
		//	map<int32, int32> Intersections = 1;
		//}
		
		message SendQueryVerticesMessage {
			optional int32 SendToMachine = 1;
		}
		
		message ReceiveQueryVerticesMessage {
			repeated int32 RecvFromMachine = 1;
		}
		
		message StartBarrierMessage {
			repeated SendQueryVerticesMessage SendQueryVertices = 1;
			repeated ReceiveQueryVerticesMessage ReceiveQueryVertices = 2;
			
			// Message to signal workers to make a system wide barrier to perform tasks
			message SendQueryVerticesMessage {
				// Query to send vertices for
				optional int32 QueryId = 1;
				// Target machine to send vertices to
				optional int32 MoveToMachine = 2;
				// Max. number of vertices to move
				optional int32 MaxMoveCount = 3;
			}
			
			// Message to signal workers to make a system wide barrier to perform tasks
			message ReceiveQueryVerticesMessage {
				// Query to receive vertices for
				optional int32 QueryId = 1;
				// Machine to receive vertices from
				optional int32 ReceiveFromMachine = 2;
			}
		}
				
		message WorkerStatsMessage {
			repeated WorkerStatSample Samples = 1;
				
			message WorkerStatSample {
				optional int64 Time = 1;
				optional bytes StatsBytes = 2;
			}
		}
	}